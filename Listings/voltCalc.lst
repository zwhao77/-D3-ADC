C51 COMPILER V9.60.0.0   VOLTCALC                                                          12/15/2022 15:32:55 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE VOLTCALC
OBJECT MODULE PLACED IN .\output\voltCalc.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\voltCalc\voltCalc.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\src\ADC0808;.\
                    -src\DAC0832;.\src\delay;.\src\Init;.\src\IO8155;.\src\reflash;.\src\voltCalc) DEBUG OBJECTEXTEND PRINT(.\Listings\voltCa
                    -lc.lst) TABS(2) OBJECT(.\output\voltCalc.obj)

line level    source

   1          #include "voltCalc.h"
   2          
   3          uchar slidV[5] = {0, 0, 0, 0, 0};
   4          uchar weight[5] = {1, 2, 4, 8, 16};
   5          uchar debnum = 0;
   6          
   7          /// @brief 平均值滤波
   8          /// @return 滤波后模拟量数值
   9          uchar avgFilt()
  10          {
  11   1          uchar V[5];
  12   1          int num = 0;
  13   1          int i = 0;
  14   1          for (i = 0; i < 5; i++)
  15   1          {
  16   2              delay_nms(50);
  17   2              V[i] = getVolt();
  18   2          }
  19   1          for (i = 0; i < 5; i++)
  20   1          {
  21   2              num += V[i];
  22   2          }
  23   1          return ((uchar)(num / 5));
  24   1      }
  25          
  26          /// @brief 滑动平均滤波
  27          /// @return 滤波后模拟量数值
  28          uchar slideavgFilt()
  29          {
  30   1          static uchar p = 0;
  31   1          int num = 0;
  32   1          int i;
  33   1          p++;
  34   1          if (p > 4)
  35   1          {
  36   2              p = 0;
  37   2          }
  38   1          slidV[p] = getVolt();
  39   1          for (i = 0; i < 5; i++)
  40   1          {
  41   2              num += slidV[i];
  42   2          }
  43   1          return ((uchar)(num / 5));
  44   1      }
  45          
  46          /// @brief 限速滤波
  47          /// @return 滤波后模拟量数值
  48          uchar speedFilt()
  49          {
  50   1          uchar V[3];
  51   1          V[0] = getVolt();
  52   1          V[1] = getVolt();
  53   1          if (abs(V[0] - V[1]) <= DV)
C51 COMPILER V9.60.0.0   VOLTCALC                                                          12/15/2022 15:32:55 PAGE 2   

  54   1          {
  55   2              return V[1];
  56   2          }
  57   1          else
  58   1          {
  59   2              V[2] = getVolt();
  60   2              if (abs(V[1] - V[2]) <= DV)
  61   2              {
  62   3                  return V[2];
  63   3              }
  64   2              else
  65   2              {
  66   3                  return ((V[1] + V[2]) / 2);
  67   3              }
  68   2          }
  69   1      }
  70          
  71          /// @brief 限幅滤波
  72          /// @return 滤波后模拟量数值
  73          uchar amplimtFilt()
  74          {
  75   1          uchar tmp = getVolt();
  76   1          if (abs(volt - tmp) < LV)
  77   1          {
  78   2              return tmp;
  79   2          }
  80   1          else
  81   1          {
  82   2              return volt;
  83   2          }
  84   1      }
  85          
  86          /// @brief 中位数滤波
  87          /// @return 滤波后模拟量数值
  88          uchar midFilt()
  89          {
  90   1          uchar V[5];
  91   1          uchar i, j;
  92   1          uchar tmp = 0;
  93   1          for (i = 0; i < 5; i++)
  94   1          {
  95   2              V[i] = getVolt();
  96   2          }
  97   1          for (i = 1; i < 5; i++)
  98   1          {
  99   2              for (j = 0; j < 5 - i; j++)
 100   2              {
 101   3                  if (V[j] > V[j + 1])
 102   3                  {
 103   4                      tmp = V[j];
 104   4                      V[j] = V[j + 1];
 105   4                      V[j + 1] = tmp;
 106   4                  }
 107   3              }
 108   2          }
 109   1          return V[2];
 110   1      }
 111          
 112          /// @brief 中位平均滤波
 113          /// @return 滤波后模拟量数值
 114          uchar midavgFilt()
 115          {
C51 COMPILER V9.60.0.0   VOLTCALC                                                          12/15/2022 15:32:55 PAGE 3   

 116   1          uchar V[5];
 117   1          uchar i, j;
 118   1          uchar tmp = 0;
 119   1          int num = 0;
 120   1          for (i = 0; i < 5; i++)
 121   1          {
 122   2              V[i] = getVolt();
 123   2          }
 124   1          for (i = 1; i < 5; i++)
 125   1          {
 126   2              for (j = 0; j < 5 - i; j++)
 127   2              {
 128   3                  if (V[j] > V[j + 1])
 129   3                  {
 130   4                      tmp = V[j];
 131   4                      V[j] = V[j + 1];
 132   4                      V[j + 1] = tmp;
 133   4                  }
 134   3              }
 135   2          }
 136   1          num = (V[1] + V[2] + V[3]);
 137   1          return ((uchar)(num / 3));
 138   1      }
 139          
 140          /// @brief 限幅平均滤波
 141          /// @return 滤波后模拟量数值
 142          uchar limtvgFilt()
 143          {
 144   1          uchar V[5];
 145   1          int num = 0;
 146   1          int i = 0;
 147   1          V[0] = volt;
 148   1          for (i = 1; i < 5; i++)
 149   1          {
 150   2              V[i] = getVolt();
 151   2              if (abs(V[i] - V[i - 1]) > LV)
 152   2              {
 153   3                  V[i] = V[i - 1];
 154   3              }
 155   2          }
 156   1          for (i = 0; i < 5; i++)
 157   1          {
 158   2              num += V[i];
 159   2          }
 160   1          return ((uchar)(num / 5));
 161   1      }
 162          
 163          /// @brief 一阶滞后滤波
 164          /// @return 滤波后模拟量数值
 165          uchar onlastFilt()
 166          {
 167   1          return ((1 - LASTA) * volt + LASTA * getVolt());
 168   1      }
 169          
 170          /// @brief 加权递推滤波
 171          /// @return 滤波后模拟量数值
 172          uchar weislidFlit()
 173          {
 174   1          static uchar p = 0;
 175   1          int num = 0;
 176   1          int i;
 177   1          slidV[p] = getVolt();
C51 COMPILER V9.60.0.0   VOLTCALC                                                          12/15/2022 15:32:55 PAGE 4   

 178   1          p++;
 179   1          if (p > 4)
 180   1          {
 181   2              p = 0;
 182   2          }
 183   1          for (i = 0; i < 5; i++)
 184   1          {
 185   2              num += weight[i] * (int)slidV[p];
 186   2              p++;
 187   2              if (p > 4)
 188   2              {
 189   3                  p = 0;
 190   3              }
 191   2          }
 192   1          return ((uchar)(num / 31));
 193   1      }
 194          
 195          /// @brief 消抖滤波
 196          /// @return 滤波后模拟量数值
 197          uchar debFilt()
 198          {
 199   1          uchar tmp = getVolt();
 200   1          if (volt == tmp)
 201   1          {
 202   2              debnum = 0;
 203   2          }
 204   1          else
 205   1          {
 206   2              debnum++;
 207   2          }
 208   1          if (debnum > MAXDEB)
 209   1          {
 210   2              debnum = 0;
 211   2              return tmp;
 212   2          }
 213   1          else
 214   1          {
 215   2              return volt;
 216   2          }
 217   1      }
 218          
 219          /// @brief 限幅消抖滤波
 220          /// @return 滤波后模拟量数值
 221          uchar debavgFilt()
 222          {
 223   1          uchar tmp = getVolt();
 224   1          if (volt == tmp)
 225   1          {
 226   2              debnum = 0;
 227   2          }
 228   1          else
 229   1          {
 230   2              if (abs(volt - tmp) < LV)
 231   2              {
 232   3                  debnum++;
 233   3              }
 234   2          }
 235   1          if (debnum > MAXDEB)
 236   1          {
 237   2              debnum = 0;
 238   2              return tmp;
 239   2          }
C51 COMPILER V9.60.0.0   VOLTCALC                                                          12/15/2022 15:32:55 PAGE 5   

 240   1          else
 241   1          {
 242   2              return volt;
 243   2          }
 244   1      }
 245          
 246          /// @brief 用于快速切换滤波方式的函数指针数组
 247          uchar (*filtFuns[11])() =
 248              {
 249                  avgFilt,
 250                  slideavgFilt,
 251                  speedFilt,
 252                  amplimtFilt,
 253                  midFilt,
 254                  midavgFilt,
 255                  limtvgFilt,
 256                  onlastFilt,
 257                  weislidFlit,
 258                  debFilt,
 259                  debavgFilt,
 260          };


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    888    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     46      43
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
